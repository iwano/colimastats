<a href='#' class='arrow arrow_left' onclick="return prev();">Previous</a>
<a href='#' class='arrow arrow_right' onclick="return next();">Next</a>
<div id='main-graphs'>
</div>
<script type="text/javascript">
var c = 0;
var svg;
function next(){
  clr.call();
  c ++;
  return graph_functions[c].call();
}
function prev(){
  clr.call();
  if (c != 0) {
    c --;
    return graph_functions[c].call();
  }
}
clr = function clear_graph(){
  $('svg').remove();
}

bubbles = function bubbles_chart(){
  alert('i <3 boblss');
}

circles = function circles_chart(){   // circles! ***********************************************************************
  var dataset = [];
var numDataPoints = 100;
var xRange = Math.random() * 1000;
var yRange = Math.random() * 1000;
for (var i = 0; i < numDataPoints; i++) {
    var newNumber1 = Math.round(Math.random() * xRange);
    var newNumber2 = Math.round(Math.random() * yRange);
    dataset.push([newNumber1, newNumber2]);
}

    var w = 900;
    var h = 500;
    var barPadding = 1;
    var padding = 30;

    svg = d3.select("#main-graphs")
            .append("svg")
            .attr("width", w)
            .attr("height", h);

    var xScale = d3.scale.linear()
                     .domain([0, w])
                     .range([padding, w - padding]);
    var yScale = d3.scale.linear()
                     .domain([0, h])
                     .range([h - padding, padding]);
    var rScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[1]; })])
                     .range([2, 5]);

    var xAxis = d3.svg.axis()
                  .scale(xScale)
                  .orient("bottom");

    var yAxis = d3.svg.axis()
                  .scale(yScale)
                  .orient("left")
                  .ticks(5);

    svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(0," + (h - padding) + ")")
    .call(xAxis);

    svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(" + padding + ",0)")
    .call(yAxis);

    svg.selectAll("circle")
   .data(dataset)
   .enter()
   .append("circle")
   .attr("cx", function(d) {
    return xScale(Math.round(Math.random() * xRange));
   })
   .attr("cy", function(d) {
    return yScale(Math.round(Math.random() * yRange));
   })
   .attr("r", function(d) {
    return rScale(d[1]*3);
   });

   svg.selectAll("text")
   .data(dataset)
   .enter()
   .append("text")
   .text(function(d) {
       return d[0] + "," + d[1];
   })
   .attr("x", function(d) {
    return xScale(d[0]);
   })
   .attr("y", function(d) {
    return yScale(d[1]);
   })
   .attr("font-family", "sans-serif")
   .attr("font-size", "11px")
   .attr("fill", "red");

}

pie = function pie_chart(){     // bubbles! ***********************************************************************

  var width = 900,
    height = 500,
    radius = Math.min(width, height) / 2;

  var color = d3.scale.ordinal()
      .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00", "#F7C764", "#E8D1A3", "#ADA7A3"]);

  var arc = d3.svg.arc()
      .outerRadius(radius - 10)
      .innerRadius(0);

  var pie = d3.layout.pie()
      .sort(null)
      .value(function(d) { return d.total; });

  svg = d3.select("#main-graphs").append("svg")
      .attr("width", width)
      .attr("height", height)
    .append("g")
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

  var dataset = gon.cities;

    var g = svg.selectAll(".arc")
        .data(pie(dataset))
      .enter().append("g")
        .attr("stroke", "#FFF")
        .attr("stroke-width", "1px")
        .attr("class", "arc");

    g.append("path")
        .attr("d", arc)
        .attr("opacity", "0.9")
        .style("fill", function(d) { return color(d.data.total); });

    var formatAsPercentage = d3.format(".1%");

    g.append("text")
        .attr("transform", function(d) {
          var c = arc.centroid(d),
          x = c[0],
          y = c[1],
          // pythagorean theorem for hypotenuse
          h = Math.sqrt(x*x + y*y);
          return "translate(" + (x/h * 235) +  ',' +
             (y/h * 235) +  ")";
        })
        .attr("dy", ".35em")
        .attr("fill", "teal")
        .attr("stroke", "teal")
        .attr("stroke-width", "1px")
        .attr("font-weight", "bold")
        .attr("font-family", "sans-serif")
        .attr("font-size", "1.5em")
        .attr("text-anchor", function(d) {
          // are we past the center?
          return (d.endAngle + d.startAngle)/2 > Math.PI ?
          "end" : "start";
        })
        .text(function(d) { return d.data.name + " - " + formatAsPercentage(d.data.total / 650555); });
}




bars = function graph_cities_total_m_f_pop(){   // graph_cities_total_m_f_pop **********************************************

    var dataset = gon.cities;
    var padding = 5;

    var w = 900;
    var h = 560;
    var barPadding = 15;

    svg = d3.select("#main-graphs")
            .append("svg")
            .attr("width", w)
            .attr("height", h);
    
    var yScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d.total; })])
                     .range([h - padding, padding*6]);

    svg.selectAll("rect")
    .data(dataset)
    .enter()
    .append("rect")
    .attr("x", function(d, i) {
    return i * (w / dataset.length);
    })
    .attr("y", function(d) {
    return yScale(d.total);
    })
    .attr("width", w / dataset.length - barPadding)
    .attr("height", function(d) {
    return h -yScale(d.total);
    })
    .attr("fill", function(d) {
    return "rgba(221, 121, 0, .7)";
    });

    svg.selectAll(".m")
    .data(dataset)
    .enter()
    .append("rect")
    .attr("x", function(d, i) {
    return i * (w / dataset.length) -5;
    })
    .attr("y", function(d) {
    return yScale(d.m);
    })
    .attr("width", w / dataset.length - barPadding)
    .attr("height", function(d) {
    return h -yScale(d.m);
    })
    .attr("fill", function(d) {
    return "rgba(80,171,236, 0.9)";
    });

    svg.selectAll(".f")
    .data(dataset)
    .enter()
    .append("rect")
    .attr("x", function(d, i) {
    return i * (w / dataset.length) +5;
    })
    .attr("y", function(d) {
    return yScale(d.f);
    })
    .attr("width", w / dataset.length - barPadding)
    .attr("height", function(d) {
    return h -yScale(d.f);
    })
    .attr("fill", function(d) {
    return "rgba(237, 172, 217, 0.7)";
    });

    svg.selectAll("text")
   .data(dataset)
   .enter()
   .append("text")
   .text(function(d) {
        return d.name;
   })
   .attr("x", function(d, i) {
        return i * (w / dataset.length) + (w / dataset.length - barPadding) / 2;
    })
   .attr("y", function(d) {
        return (yScale(d.total)) + 14;
    })
   .attr("font-family", "sans-serif")
   .attr("font-size", "11px")
   .attr("fill", "white")
   .attr("text-anchor", "middle");

   svg.selectAll(".total")
   .data(dataset)
   .enter()
   .insert("text")
   .text(function(d) {
        return d.total;
   })
   .attr("x", function(d, i) {
        return i * (w / dataset.length) + (w / dataset.length - barPadding) / 2;
    })
   .attr("y", function(d) {
        return (yScale(d.total)) - 5;
    })
   .attr("font-family", "sans-serif")
   .attr("font-size", "25px")
   .attr("font-weight", "bold")
   .attr("fill", "black")
   .attr("text-anchor", "middle");

   svg
    .append("rect")
    .attr("x", 230)
    .attr("y", 200)
    .attr("width", 150)
    .attr("height", 100)
    .attr("fill", "white");

  svg
    .append("rect")
    .attr("x", 240)
    .attr("y", 270)
    .attr("width", 20)
    .attr("height", 20)
    .attr("fill", function(d) {
    return "rgba(237, 172, 217, 1)";
    });

  svg
   .append("text")
   .text('Mujeres')
   .attr("x", 275)
   .attr("y", 282)
   .attr("font-family", "sans-serif")
   .attr("font-size", "11px")
   .attr("fill", "black")
   .attr("font-weight", "bold");

  svg
    .append("rect")
    .attr("x", 240)
    .attr("y", 240)
    .attr("width", 20)
    .attr("height", 20)
    .attr("fill", function(d) {
    return "rgba(80,171,236, 1)";
    });

  svg
   .append("text")
   .text('Hombres')
   .attr("x", 275)
   .attr("y", 252)
   .attr("font-family", "sans-serif")
   .attr("font-size", "11px")
   .attr("fill", "black")
   .attr("font-weight", "bold");

  svg
    .append("rect")
    .attr("x", 240)
    .attr("y", 210)
    .attr("width", 20)
    .attr("height", 20)
    .attr("fill", function(d) {
    return "rgba(221, 121, 0, .7)";
    });

  svg
   .append("text")
   .text('Total')
   .attr("x", 275)
   .attr("y", 222)
   .attr("font-family", "sans-serif")
   .attr("font-size", "11px")
   .attr("fill", "black")
   .attr("font-weight", "bold");

}

var graph_functions =[bars, pie, circles, bubbles, clr]
graph_functions[c].call();
</script>
