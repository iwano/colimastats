<a href='#' class='arrow arrow_left' onclick="return prev();">Previous</a>
<a href='#' class='arrow arrow_right' onclick="return next();">Next</a>
<div id="view_selection" class="btn-group">
  <a href="#" id="all" class="btn active">Whole state</a>
  <a href="#" id="cities" class="btn">By city</a>
</div>
<table id='chart-legend'>
  <tbody>
    <tr><th>Armeria</th><td style='background:#56B9FF'></td></tr>
    <tr><th>Colima</th><td style='background:#7aa25c'></td></tr>
    <tr><th>Comala</th><td style='background:#F7C764'></td></tr>
    <tr><th>Coquimatlan</th><td style='background:#6b486b'></td></tr>
    <tr><th>Cuauhtemoc</th><td style='background:#F2163E'></td></tr>
    <tr><th>Ixtlahuacan</th><td style='background:#98abc5'></td></tr>
    <tr><th>Manzanillo</th><td style='background:#DD7900'></td></tr>
    <tr><th>Minatitlan</th><td style='background:#F2B0DE'></td></tr>
    <tr><th>Tecoman</th><td style='background:#E8D1A3'></td></tr>
    <tr><th>Villa de Alvarez</th><td style='background:#ADA7A3'></td></tr>
  </tbody>
</table>
<div id='main-graphs'>
</div>
<script type="text/javascript">
$(document).ready(function() {
    $(document).ready(function() {
      $('#view_selection a').click(function() {
        var view_type = $(this).attr('id');
        $('#view_selection a').removeClass('active');
        $(this).toggleClass('active');
        toggle_view(view_type);
        return false;
      });
    });
});
var c = 0;
var svg;
function next(){
  clr.call();
  hide_controls()
  c ++;
  return graph_functions[c].call();
}
function prev(){
  hide_controls()
  if (c != 0) {
    clr.call();
    c --;
    return graph_functions[c].call();
  }
}
clr = function clear_graph(){
  $('svg').remove();
}
function display_controls(){
  $('#chart-legend').css('visibility','visible');
  $('#view_selection').css('visibility','visible');
}
function hide_controls(){
  $('#chart-legend').css('visibility','hidden');
  $('#view_selection').css('visibility','hidden');
}

bubbles = function bubbles_chart(){
  

  var BubbleChart

BubbleChart = (function() {

  function BubbleChart(data) {

    var max_amount;
    this.data = data;
    this.width = 1000;
    this.height = 640;
    this.tooltip = CustomTooltip("localities_tooltip", 240);
    this.center = {
      x: this.width / 2,
      y: this.height / 2
    };
    this.cities_centers = {
      "Armeria": {
        x: this.width / 4,
        y: this.height / 3
      },
      "Colima": {
        x: this.width / 4,
        y: this.height / 1.5
      },
      "Comala": {
        x: this.width / 3.5,
        y: this.height / 2
      },
      "Coquimatlan": {
        x: this.width / 2.1,
        y: this.height / 3
      },
      "Cuauhtemoc": {
        x: this.width / 2.3,
        y: this.height / 2
      },
      "Ixtlahuacan": {
        x: this.width / 2.2,
        y: this.height / 1.5
      },
      "Manzanillo": {
        x: this.width / 1.5,
        y: this.height / 3
      },
      "Minatitlan": {
        x: this.width / 1.8,
        y: this.height / 2
      },
      "Tecoman": {
        x: this.width / 1.5,
        y: this.height / 2
      },
      "Villa de Alvarez": {
        x: this.width / 1.7,
        y: this.height / 1.5
      }
    };
    this.layout_gravity = -0.01;
    this.damper = 0.1;
    this.vis = null;
    this.nodes = [];
    this.force = null;
    this.circles = null;
    this.fill_color = d3.scale.ordinal()
      .domain(["Armeria", "Colima", "Comala", "Coquimatlan", "Cuauhtemoc", "Ixtlahuacan", "Manzanillo", "Minatitlan", "Tecoman", "Villa de Alvarez"])
      .range(["#56B9FF", "#7aa25c", "#F7C764", "#6b486b", "#F2163E", "#98abc5", "#DD7900", "#F2B0DE", "#E8D1A3", "#ADA7A3"]);
    max_amount = d3.max(this.data, function(d) {
      return parseInt(d.pob_total);
    });
    this.radius_scale = d3.scale.pow().exponent(0.5).domain([0, max_amount]).range([2, 85]);
    this.create_nodes();
    this.create_vis();
  }

  BubbleChart.prototype.create_nodes = function() {
    var _this = this;
    this.data.forEach(function(d) {
      var node;
      node = {
        id: d.id,
        radius: _this.radius_scale(parseInt(d.pob_total)),
        value: d.pob_total,
        name: d.name,
        group: d.group,
        city: d.city_id,
        x: Math.random() * 900,
        y: Math.random() * 800
      };
      return _this.nodes.push(node);
    });
    return this.nodes.sort(function(a, b) {
      return b.value - a.value;
    });
  };

  BubbleChart.prototype.create_vis = function() {
    var that,
      _this = this;
    this.vis = d3.select("#main-graphs").append("svg").attr("width", this.width).attr("height", this.height).attr("id", "svg_vis");
    this.circles = this.vis.selectAll("circle").data(this.nodes, function(d) {
      return d.id;
    });
    that = this;
    this.circles.enter().append("circle").attr("r", 0).attr("fill", function(d) {
      return _this.fill_color(d.city);
    }).attr("stroke-width", 2).attr("stroke", function(d) {
      return d3.rgb(_this.fill_color(d.city)).darker();
    }).attr("id", function(d) {
      return "bubble_" + d.id;
    }).on("mouseover", function(d, i) {
      return that.show_details(d, i, this);
    }).on("mouseout", function(d, i) {
      return that.hide_details(d, i, this);
    });
    return this.circles.transition().duration(2000).attr("r", function(d) {
      return d.radius;
    });
  };

  BubbleChart.prototype.charge = function(d) {
    return -Math.pow(d.radius, 2.0) / 8;
  };

  BubbleChart.prototype.start = function() {
    return this.force = d3.layout.force().nodes(this.nodes).size([this.width, this.height]);
  };

  BubbleChart.prototype.display_group_all = function() {
    var _this = this;
    this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", function(e) {
      return _this.circles.each(_this.move_towards_center(e.alpha)).attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      });
    });
    return this.force.start();
  };

  BubbleChart.prototype.move_towards_center = function(alpha) {
    var _this = this;
    return function(d) {
      d.x = d.x + (_this.center.x - d.x) * (_this.damper + 0.02) * alpha;
      return d.y = d.y + (_this.center.y - d.y) * (_this.damper + 0.02) * alpha;
    };
  };

  BubbleChart.prototype.display_by_city = function() {
    var _this = this;
    this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", function(e) {
      return _this.circles.each(_this.move_towards_city(e.alpha)).attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      });
    });
    return this.force.start();
  };

  BubbleChart.prototype.move_towards_city = function(alpha) {
    var _this = this;
    return function(d) {
      var target;
      target = _this.cities_centers[d.city];
      d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
      return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
    };
  };

  BubbleChart.prototype.show_details = function(data, i, element) {
    var content;
    d3.select(element).attr("stroke", "black");
    content = "<span class=\"name\">Name:</span><span class=\"value\"> " + data.name + "</span><br/>";
    content += "<span class=\"name\">Total population:</span><span class=\"value\"> " + (addCommas(data.value)) + "</span><br/>";
    content += "<span class=\"name\">City:</span><span class=\"value\"> " + data.city + "</span>";
    return this.tooltip.showTooltip(content, d3.event);
  };

  BubbleChart.prototype.hide_details = function(data, i, element) {
    var _this = this;
    d3.select(element).attr("stroke", function(d) {
      return d3.rgb(_this.fill_color(d.city)).darker();
    });
    return this.tooltip.hideTooltip();
  };

  return BubbleChart;

})();
  
  var root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;


  $(function() {
    var chart, render_vis,
    chart = null;
    render_vis = function(csv) {
      chart = new BubbleChart(csv);
      chart.start();
      return display_all();
    };
    display_all = function() {
      return chart.display_group_all();
    };
    display_cities = function() {
      return chart.display_by_city();
    };
    root.toggle_view = function(view_type) {
      if (view_type === 'cities') {
        return display_cities();
      } else {
        return display_all();
      }
    };
    return d3.csv("assets/localities.csv", render_vis);
  });
  display_controls()
}

circles = function circles_chart(){   // circles!***********************************************************************
  var dataset = [];
var numDataPoints = 100;
var xRange = Math.random() * 1000;
var yRange = Math.random() * 1000;
for (var i = 0; i < numDataPoints; i++) {
    var newNumber1 = Math.round(Math.random() * xRange);
    var newNumber2 = Math.round(Math.random() * yRange);
    dataset.push([newNumber1, newNumber2]);
}

    var w = 900;
    var h = 500;
    var barPadding = 1;
    var padding = 30;

    svg = d3.select("#main-graphs")
            .append("svg")
            .attr("width", w)
            .attr("height", h);

    var xScale = d3.scale.linear()
                     .domain([0, w])
                     .range([padding, w - padding]);
    var yScale = d3.scale.linear()
                     .domain([0, h])
                     .range([h - padding, padding]);
    var rScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d[1]; })])
                     .range([2, 5]);

    var xAxis = d3.svg.axis()
                  .scale(xScale)
                  .orient("bottom");

    var yAxis = d3.svg.axis()
                  .scale(yScale)
                  .orient("left")
                  .ticks(5);

    svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(0," + (h - padding) + ")")
    .call(xAxis);

    svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(" + padding + ",0)")
    .call(yAxis);

    svg.selectAll("circle")
   .data(dataset)
   .enter()
   .append("circle")
   .attr("cx", function(d) {
    return xScale(Math.round(Math.random() * xRange));
   })
   .attr("cy", function(d) {
    return yScale(Math.round(Math.random() * yRange));
   })
   .attr("r", function(d) {
    return rScale(d[1]*3);
   });

   svg.selectAll("text")
   .data(dataset)
   .enter()
   .append("text")
   .text(function(d) {
       return d[0] + "," + d[1];
   })
   .attr("x", function(d) {
    return xScale(d[0]);
   })
   .attr("y", function(d) {
    return yScale(d[1]);
   })
   .attr("font-family", "sans-serif")
   .attr("font-size", "11px")
   .attr("fill", "red");

}

pie = function pie_chart(){     // bubbles! ***********************************************************************

  var width = 900,
    height = 500,
    radius = Math.min(width, height) / 2;

  var color = d3.scale.ordinal()
      .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00", "#F7C764", "#E8D1A3", "#ADA7A3"]);

  var arc = d3.svg.arc()
      .outerRadius(radius - 10)
      .innerRadius(0);

  var pie = d3.layout.pie()
      .sort(null)
      .value(function(d) { return d.total; });

  svg = d3.select("#main-graphs").append("svg")
      .attr("width", width)
      .attr("height", height)
    .append("g")
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

  var dataset = gon.cities;

    var g = svg.selectAll(".arc")
        .data(pie(dataset))
      .enter().append("g")
        .attr("stroke", "#FFF")
        .attr("stroke-width", "1px")
        .attr("class", "arc");

    g.append("path")
        .attr("d", arc)
        .attr("opacity", "0.9")
        .style("fill", function(d) { return color(d.data.total); });

    var formatAsPercentage = d3.format(".1%");

    g.append("text")
        .attr("transform", function(d) {
          var c = arc.centroid(d),
          x = c[0],
          y = c[1],
          // pythagorean theorem for hypotenuse
          h = Math.sqrt(x*x + y*y);
          return "translate(" + (x/h * 235) +  ',' +
             (y/h * 235) +  ")";
        })
        .attr("dy", ".35em")
        .attr("fill", "teal")
        .attr("stroke", "teal")
        .attr("stroke-width", "1px")
        .attr("font-weight", "bold")
        .attr("font-family", "sans-serif")
        .attr("font-size", "1.5em")
        .attr("text-anchor", function(d) {
          // are we past the center?
          return (d.endAngle + d.startAngle)/2 > Math.PI ?
          "end" : "start";
        })
        .text(function(d) { return d.data.name + " - " + formatAsPercentage(d.data.total / 650555); });
}




bars = function graph_cities_total_m_f_pop(){   // graph_cities_total_m_f_pop **********************************************

    var dataset = gon.cities;
    var padding = 5;

    var w = 900;
    var h = 560;
    var barPadding = 15;

    svg = d3.select("#main-graphs")
            .append("svg")
            .attr("width", w)
            .attr("height", h);
    
    var yScale = d3.scale.linear()
                     .domain([0, d3.max(dataset, function(d) { return d.total; })])
                     .range([h - padding, padding*6]);

    svg.selectAll("rect")
    .data(dataset)
    .enter()
    .append("rect")
    .attr("x", function(d, i) {
    return i * (w / dataset.length);
    })
    .attr("y", function(d) {
    return yScale(d.total);
    })
    .attr("width", w / dataset.length - barPadding)
    .attr("height", function(d) {
    return h -yScale(d.total);
    })
    .attr("fill", function(d) {
    return "rgba(221, 121, 0, .7)";
    });

    svg.selectAll(".m")
    .data(dataset)
    .enter()
    .append("rect")
    .attr("x", function(d, i) {
    return i * (w / dataset.length) -5;
    })
    .attr("y", function(d) {
    return yScale(d.m);
    })
    .attr("width", w / dataset.length - barPadding)
    .attr("height", function(d) {
    return h -yScale(d.m);
    })
    .attr("fill", function(d) {
    return "rgba(80,171,236, 0.9)";
    });

    svg.selectAll(".f")
    .data(dataset)
    .enter()
    .append("rect")
    .attr("x", function(d, i) {
    return i * (w / dataset.length) +5;
    })
    .attr("y", function(d) {
    return yScale(d.f);
    })
    .attr("width", w / dataset.length - barPadding)
    .attr("height", function(d) {
    return h -yScale(d.f);
    })
    .attr("fill", function(d) {
    return "rgba(237, 172, 217, 0.7)";
    });

    svg.selectAll("text")
   .data(dataset)
   .enter()
   .append("text")
   .text(function(d) {
        return d.name;
   })
   .attr("x", function(d, i) {
        return i * (w / dataset.length) + (w / dataset.length - barPadding) / 2;
    })
   .attr("y", function(d) {
        return (yScale(d.total)) + 14;
    })
   .attr("font-family", "sans-serif")
   .attr("font-size", "11px")
   .attr("fill", "white")
   .attr("text-anchor", "middle");

   svg.selectAll(".total")
   .data(dataset)
   .enter()
   .insert("text")
   .text(function(d) {
        return d.total;
   })
   .attr("x", function(d, i) {
        return i * (w / dataset.length) + (w / dataset.length - barPadding) / 2;
    })
   .attr("y", function(d) {
        return (yScale(d.total)) - 5;
    })
   .attr("font-family", "sans-serif")
   .attr("font-size", "25px")
   .attr("font-weight", "bold")
   .attr("fill", "black")
   .attr("text-anchor", "middle");

   svg
    .append("rect")
    .attr("x", 230)
    .attr("y", 200)
    .attr("width", 150)
    .attr("height", 100)
    .attr("fill", "white");

  svg
    .append("rect")
    .attr("x", 240)
    .attr("y", 270)
    .attr("width", 20)
    .attr("height", 20)
    .attr("fill", function(d) {
    return "rgba(237, 172, 217, 1)";
    });

  svg
   .append("text")
   .text('Mujeres')
   .attr("x", 275)
   .attr("y", 282)
   .attr("font-family", "sans-serif")
   .attr("font-size", "11px")
   .attr("fill", "black")
   .attr("font-weight", "bold");

  svg
    .append("rect")
    .attr("x", 240)
    .attr("y", 240)
    .attr("width", 20)
    .attr("height", 20)
    .attr("fill", function(d) {
    return "rgba(80,171,236, 1)";
    });

  svg
   .append("text")
   .text('Hombres')
   .attr("x", 275)
   .attr("y", 252)
   .attr("font-family", "sans-serif")
   .attr("font-size", "11px")
   .attr("fill", "black")
   .attr("font-weight", "bold");

  svg
    .append("rect")
    .attr("x", 240)
    .attr("y", 210)
    .attr("width", 20)
    .attr("height", 20)
    .attr("fill", function(d) {
    return "rgba(221, 121, 0, .7)";
    });

  svg
   .append("text")
   .text('Total')
   .attr("x", 275)
   .attr("y", 222)
   .attr("font-family", "sans-serif")
   .attr("font-size", "11px")
   .attr("fill", "black")
   .attr("font-weight", "bold");

}

var graph_functions =[bars, pie, bubbles, clr]
graph_functions[c].call();
</script>
